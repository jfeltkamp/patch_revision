<?php

/**
 * @file
 * Contains patch_revision.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\changed_fields\NodeSubject;
use Drupal\patch_revision\NodeObserver;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function patch_revision_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the patch_revision module.
    case 'help.page.patch_revision':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides the possibility to patch changes from a entity revision into the current revision.') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_help().
 */
function patch_revision_theme($existing, $type, $theme, $path) {
  return [
    'field_patches' => [
      'variables' => [
        'items' => NULL,
        'title' => NULL,
      ],
    ],
    'field_patch' => [
      'variables' => [
        'col' => NULL,
        'patch' => NULL,
      ],
    ],
    'log_message' => [
      'variables' => [
        'label' => NULL,
        'message' => NULL,
      ],
    ],
    'pr_view_image' => [
      'variables' => [
        'left' => NULL,
        'right' => NULL,
      ],
    ],
  ];
}


function patch_revision_node_presave(NodeInterface $node) {
  /** @var \Drupal\patch_revision\AccessService $access_service */
  $access_service = \Drupal::service('patch_revision.access_service');


  if ($access_service->startPatchCreateProcess()) {

    // Create NodeSubject object that will check node fields by DefaultFieldComparator.
    $nodeSubject = new NodeSubject($node, 'default_field_comparator');

    // Add your observer object to NodeSubject.
    $nodeSubject->attach(new NodeObserver());

    // Check if node fields have been changed.
    $nodeSubject->notify();

  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function patch_revision_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\patch_revision\AccessService $access_service */
  $access_service = \Drupal::service('patch_revision.access_service');

  // Insert checkbox create patch to node form.
  /** @var NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if ($access_service->displayCheckboxCreatePatch($node->getType())) {
    $form['create_patch'] = [
      '#type' => 'checkbox',
      '#title' => t('Create patch from changes.'),
      '#default_value' => true,
      '#access' => true,
      '#group' => 'revision_information',
      '#disabled' => false,
      '#description' => t('A patch is an improvement suggestion and therefore less than a revision. It can be reviewed and submitted to a later revision.'),
      '#weight' => 19
    ];
  }

  // Set log message required.
  if ($access_service->logMessageRequired()) {
    if (isset($form['revision_log']['widget'][0]['value']['#required'])) {
      $form['revision_log']['widget'][0]['value']['#required'] = TRUE;
    }
  }

  // Set title of log message textarea.
  if ($title = $access_service->overrideLogMessageTitle()) {
    $form['revision_log']['widget'][0]['value']['#title'] = t($title);
  }
}